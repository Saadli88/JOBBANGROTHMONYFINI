{"ast":null,"code":"import React,{useState}from\"react\";import\"./ConnexionEnt.css\";import NavBar from'../NavBar/NavBar';import{useNavigate}from'react-router-dom';// Pour naviguer après la connexion\n//import { EmployersList } from '../../data/employers'; //// Assurez-vous que le chemin est correct\nimport{useConnexionEntreprise}from\"../../hooks/useConnexionEntreprise\";//import { useEntrepriseContext } from \"../../hooks/useEntrepriseContext\";\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ConnexionEnt=()=>{// const {dispatch} = useEntrepriseContext()\nconst navigate=useNavigate();const[emailEntreprise,setEmailEntreprise]=useState('');const[mot_de_passeEntreprise,setMDPentreprise]=useState('');const{connexionEnt,error,isLoading}=useConnexionEntreprise();const handleSubmit=async e=>{e.preventDefault();await connexionEnt(emailEntreprise,mot_de_passeEntreprise);// Si la connexion est réussie, rediriger vers la page Candidat\nif(!error){navigate('/ent');}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(NavBar,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"connexion-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Connexion\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Employeur\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"input-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Email\"}),/*#__PURE__*/_jsx(\"input\",{type:\"email\",value:emailEntreprise,onChange:e=>setEmailEntreprise(e.target.value),required:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Mot de passe\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",value:mot_de_passeEntreprise,onChange:e=>setMDPentreprise(e.target.value),required:true})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"submit-btn\",disabled:isLoading,children:\"Se connecter\"}),error&&/*#__PURE__*/_jsx(\"p\",{className:\"error\",children:error})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"signup\",children:[/*#__PURE__*/_jsx(\"p\",{children:\"Pas de compte avec nous ?\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"a\",{href:\"./inscent\",children:/*#__PURE__*/_jsx(\"button\",{className:\"signup-btn\",children:\"Cr\\xE9er un compte\"})})]})]})]});};export default ConnexionEnt;/*\r\n\r\n\r\n\r\nfunction ConnexionEnt() {\r\n  const [userType] = useState(\"Employeur\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [errorMessage, setErrorMessage] = useState(\"\"); // État pour le message d'erreur\r\n  const navigate = useNavigate(); // Pour rediriger après la connexion réussie\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    \r\n    // Vérifiez si l'email est dans la liste des employeurs\r\n    const employer = EmployersList.find(emp => emp.email === email && emp.password === password);\r\n  \r\n    if (employer) {\r\n      console.log(`Logging in as ${userType} with email: ${email}`);\r\n      // Si l'authentification est réussie, rediriger vers la page entreprise avec l'email\r\n      navigate('/ent', { state: { connectedEmployerEmail: email } }); // Passe l'email ici\r\n    } else {\r\n      setErrorMessage(\"Email ou mot de passe incorrect.\"); // Définir le message d'erreur\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <NavBar />\r\n      <div className=\"connexion-container\">\r\n        <h2>Connexion</h2>\r\n        <p>Employeur</p>\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"input-group\">\r\n            <label>Email</label>\r\n            <input\r\n              type=\"email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              required\r\n              placeholder=\"Entrez votre email\"\r\n            />\r\n          </div>\r\n          <div className=\"input-group\">\r\n            <label>Mot de passe</label>\r\n            <input\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              required\r\n              placeholder=\"Entrez votre mot de passe\"\r\n            />\r\n          </div>\r\n          <button className=\"login-btn\"type=\"submit\">Se connecter</button>\r\n   *//*\r\n         {errorMessage && <div className=\"error-message\">{errorMessage}</div>} {/* Afficher le message d'erreur *//*\r\n         </form>\r\n\r\n        \r\n        <div className=\"signup\">\r\n          <p>Pas de compte avec nous ?</p>\r\n          <br />\r\n          <a href=\"./inscent\">\r\n            <button className=\"signup-btn\">Créer un compte</button>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ConnexionEnt;\r\n***/","map":{"version":3,"names":["React","useState","NavBar","useNavigate","useConnexionEntreprise","jsx","_jsx","jsxs","_jsxs","ConnexionEnt","navigate","emailEntreprise","setEmailEntreprise","mot_de_passeEntreprise","setMDPentreprise","connexionEnt","error","isLoading","handleSubmit","e","preventDefault","children","className","onSubmit","type","value","onChange","target","required","disabled","href"],"sources":["C:/Users/rothm/source/repos/JOBBANGROTHMONYFINI/server/client/src/components/ConnexionEnt/ConnexionEnt.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./ConnexionEnt.css\";\r\nimport NavBar from '../NavBar/NavBar';\r\nimport { useNavigate } from 'react-router-dom'; // Pour naviguer après la connexion\r\n//import { EmployersList } from '../../data/employers'; //// Assurez-vous que le chemin est correct\r\nimport { useConnexionEntreprise } from \"../../hooks/useConnexionEntreprise\";\r\n\r\n//import { useEntrepriseContext } from \"../../hooks/useEntrepriseContext\";\r\n\r\n\r\nconst ConnexionEnt = () => {\r\n // const {dispatch} = useEntrepriseContext()\r\n  const navigate = useNavigate();\r\n  const [emailEntreprise, setEmailEntreprise]= useState('')\r\n  const [mot_de_passeEntreprise,setMDPentreprise]= useState('')\r\n  const {connexionEnt, error, isLoading} = useConnexionEntreprise()\r\n\r\n \r\n\r\n\r\n    const handleSubmit = async (e) => {\r\n      e.preventDefault();\r\n      await connexionEnt(emailEntreprise, mot_de_passeEntreprise);\r\n      \r\n      // Si la connexion est réussie, rediriger vers la page Candidat\r\n      if (!error) {\r\n        navigate('/ent');\r\n      }\r\n    };\r\n\r\n  return (\r\n\r\n    <div>\r\n      <NavBar />\r\n      <div className=\"connexion-container\">\r\n        <h2>Connexion</h2>\r\n        <p>Employeur</p>\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"input-group\">\r\n            <label>Email</label>\r\n            <input\r\n              type=\"email\"\r\n              value={emailEntreprise}\r\n              onChange={(e) => setEmailEntreprise(e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n      \r\n          <div className=\"input-group\">\r\n            <label>Mot de passe</label>\r\n            <input\r\n              type=\"password\"\r\n              value={mot_de_passeEntreprise}\r\n              onChange={(e) => setMDPentreprise(e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"submit-btn\" disabled={isLoading}>\r\n            Se connecter\r\n          </button>\r\n          {error && <p className=\"error\">{error}</p>}\r\n        </form>\r\n\r\n        <div className=\"signup\">\r\n          <p>Pas de compte avec nous ?</p>\r\n          <br />\r\n          <a href=\"./inscent\">\r\n            <button className=\"signup-btn\">Créer un compte</button>\r\n          </a>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default ConnexionEnt;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n\r\n\r\n\r\nfunction ConnexionEnt() {\r\n  const [userType] = useState(\"Employeur\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [errorMessage, setErrorMessage] = useState(\"\"); // État pour le message d'erreur\r\n  const navigate = useNavigate(); // Pour rediriger après la connexion réussie\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    \r\n    // Vérifiez si l'email est dans la liste des employeurs\r\n    const employer = EmployersList.find(emp => emp.email === email && emp.password === password);\r\n  \r\n    if (employer) {\r\n      console.log(`Logging in as ${userType} with email: ${email}`);\r\n      // Si l'authentification est réussie, rediriger vers la page entreprise avec l'email\r\n      navigate('/ent', { state: { connectedEmployerEmail: email } }); // Passe l'email ici\r\n    } else {\r\n      setErrorMessage(\"Email ou mot de passe incorrect.\"); // Définir le message d'erreur\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <NavBar />\r\n      <div className=\"connexion-container\">\r\n        <h2>Connexion</h2>\r\n        <p>Employeur</p>\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"input-group\">\r\n            <label>Email</label>\r\n            <input\r\n              type=\"email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              required\r\n              placeholder=\"Entrez votre email\"\r\n            />\r\n          </div>\r\n          <div className=\"input-group\">\r\n            <label>Mot de passe</label>\r\n            <input\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              required\r\n              placeholder=\"Entrez votre mot de passe\"\r\n            />\r\n          </div>\r\n          <button className=\"login-btn\"type=\"submit\">Se connecter</button>\r\n   *//*\r\n         {errorMessage && <div className=\"error-message\">{errorMessage}</div>} {/* Afficher le message d'erreur */\r\n      /*\r\n         </form>\r\n\r\n        \r\n        <div className=\"signup\">\r\n          <p>Pas de compte avec nous ?</p>\r\n          <br />\r\n          <a href=\"./inscent\">\r\n            <button className=\"signup-btn\">Créer un compte</button>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ConnexionEnt;\r\n***/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}